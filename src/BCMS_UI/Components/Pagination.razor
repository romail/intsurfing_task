@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(ActivePageNumber == 1 ? "disabled" : "")">
            <button class="page-link" @onclick="GoToFirstPage" aria-label="First" >
               <span aria-hidden="true">@FirstLinkIcon</span>
           </button>
        </li>
         <li class="page-item @(ActivePageNumber == 1 ? "disabled" : "")">
             <button class="page-link" @onclick="GoToPreviousPage" aria-label="Previous">
                 <span aria-hidden="true">@PreviousLinkIcon</span>
            </button>
        </li>
        @foreach (var pageNumber in PageNumbers)
        {
            <li class="page-item @(ActivePageNumber == pageNumber ? "active" : "")">
                <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
            </li>
        }
        <li class="page-item @(ActivePageNumber == TotalPages ? "disabled" : "")">
            <button class="page-link" @onclick="GoToNextPage" aria-label="Next">
                <span aria-hidden="true">@NextLinkIcon</span>
            </button>
          </li>
        <li class="page-item @(ActivePageNumber == TotalPages ? "disabled" : "")">
           <button class="page-link" @onclick="GoToLastPage" aria-label="Last">
               <span aria-hidden="true">@LastLinkIcon</span>
            </button>
         </li>
    </ul>
</nav>
@code {
    [Parameter]
    public int ActivePageNumber { get; set; }

    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int DisplayPages { get; set; } = 5;

    [Parameter]
    public string? FirstLinkIcon { get; set; }

    [Parameter]
    public string? PreviousLinkIcon { get; set; }

    [Parameter]
    public string? NextLinkIcon { get; set; }

    [Parameter]
    public string? LastLinkIcon { get; set; }

    [Parameter]
    public EventCallback<int> OnPageChange { get; set; }

    private List<int> PageNumbers => CalculatePaginationRange();

    private List<int> CalculatePaginationRange()
    {
        var startPage = ActivePageNumber - (DisplayPages / 2);
        if (startPage + DisplayPages > TotalPages)
        {
            startPage = TotalPages - DisplayPages + 1;
        }

        if (startPage < 1)
            startPage = 1;

        var endPage = startPage + DisplayPages - 1;

        if (endPage > TotalPages)
            endPage = TotalPages;

        List<int> pageNumbers = new();
        for (int i = startPage; i <= endPage; i++)
        {
            pageNumbers.Add(i);
        }

        return pageNumbers;
    }
    private async Task GoToPage(int page)
    {
        if (page != ActivePageNumber)
        {
            await OnPageChange.InvokeAsync(page);
        }
    }
    private async Task GoToFirstPage()
    {
        if (ActivePageNumber != 1)
        {
            await OnPageChange.InvokeAsync(1);
        }
    }
    private async Task GoToPreviousPage()
    {
        if (ActivePageNumber > 1)
        {
            await OnPageChange.InvokeAsync(ActivePageNumber - 1);
        }
    }
    private async Task GoToNextPage()
    {
        if (ActivePageNumber < TotalPages)
        {
            await OnPageChange.InvokeAsync(ActivePageNumber + 1);
        }
    }
    private async Task GoToLastPage()
    {
        if (ActivePageNumber != TotalPages)
        {
            await OnPageChange.InvokeAsync(TotalPages);
        }
    }
}